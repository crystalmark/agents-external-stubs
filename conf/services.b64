{  "services": [    {      "name": "HMRC-CGT-PD",      "description": "Capital Gains Tax for Individuals or Organisations",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "CGTPDRef",          "description": "Capital Gains Tax Reference",          "regex": "^X[A-Z]CGTP[0-9]{9}$",          "pattern": "cgtPdRef"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "PostCode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "CountryCode",          "description": "Country Code",          "regex": "^[A-Za-z]{2}$",          "pattern": "countrycode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "IR-SA-PART-ORG",      "description": "Self Assessment Online for Partnerships",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "UTR",          "description": "Unique Taxpayer Reference",          "regex": "^[0-9]{1,10}$",          "pattern": "utr"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-MOSSNU-ORG",      "description": "VAT Mini One Stop Shop - Businesses outside EU",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "HMRCMOSSNUVRN",          "description": "MOSS Identification Number",          "regex": "^[0-9A-Za-z]{1,11}$"        }      ],      "knownFacts": [        {          "name": "HMRCMOSSEDR",          "description": "MOSS Effective Date of Registration",          "regex": "^\\d{2}\\/\\d{2}\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-AS-AGENT",      "description": "HMRC Agent Services",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "AgentReferenceNumber",          "description": "Agent Reference Number",          "regex": "^[0-9A-Za-z]{1,11}$",          "pattern": "arn"        }      ],      "knownFacts": [        {          "name": "AgencyPostcode",          "description": "Agency Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "CountryCode",          "description": "Country Code",          "regex": "^[A-Za-z]{2}$",          "pattern": "countrycode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-EI-ORG",      "description": "Submit an Employment Intermediary Report",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "TaxOfficeNo",          "description": "Tax Office Number",          "regex": "^\\d{3}$"        },        {          "name": "EmployerRef",          "description": "Employer Reference",          "regex": "^[A-Za-z0-9 ]{1,10}$"        }      ],      "knownFacts": [        {          "name": "AccountsRef",          "description": "Accounts Office Reference",          "regex": "^[A-Za-z0-9 ]{1,13}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-NOVRN-AGNT",      "description": "Non VAT Registered Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "VATAgentRefNo",          "description": "VAT Agent Reference Number",          "regex": "^[0-9A-Za-z]{6}$"        }      ],      "knownFacts": [        {          "name": "POSTCODE",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-VATRSL-ORG",      "description": "VAT Reverse Charge Sales List (RCSL)",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "VATREGNO",          "description": "VAT Registration Number",          "regex": "^[0-9]{9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "IRPCODE",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$",          "pattern": "postcode"        },        {          "name": "IREFFREGDATE",          "description": "Date of Registration",          "regex": "^[0-9/]{6,8}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "PEPDNO",          "description": "Month of Last VAT Return Period End",          "regex": "^[a-zA-Z]{1}[a-zA-Z/]{1}[a-zA-Z]{1}$",          "pattern": "date:MMM"        },        {          "name": "PETAXDUESALES",          "description": "Last Net VAT due",          "regex": "^[0-9.]{1,12}$",          "pattern": "999999.99"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-AWRS-ORG",      "description": "Alcohol Wholesaler Registration Scheme (AWRS)",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "AWRSRefNumber",          "description": "AWRS Registration Number",          "regex": "^[0-9A-Za-z]{1,15}$"        }      ],      "knownFacts": [        {          "name": "CTUTR",          "description": "Corporation Tax Unique Taxpayer Reference",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAUTR",          "description": "Self Assessment Unique Taxpayer Reference ",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAFEID",          "description": "HMRC Issued Unique Tax Reference",          "regex": "^[0-9A-Za-z]{1,15}$|.{0}"        },        {          "name": "Postcode",          "description": "Registered Business Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMCE-VATVAR-ORG",      "description": "Change VAT registration details",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "VATREGNO",          "description": "VAT Registration Number",          "regex": "^[0-9]{1,9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "IRPCODE",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        },        {          "name": "IREFFREGDATE",          "description": "Date of Registration",          "regex": "^([1-2][0-9]|[0][1-9]|[3][0-1])\\/([0][1-9]|[1][0]|[1][1]|[1][2])\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "PEPDNO",          "description": "Month of Last VAT Return Period End",          "regex": "^([A-Za-z]{3}|[Nn]\\/[Aa])$",          "pattern": "date:MMM"        },        {          "name": "PETAXDUESALES",          "description": "Last Net VAT due",          "regex": "^(\\-{0,1}\\d{1,9}|\\-{0,1}\\d{1,9}\\.\\d{1,2})$",          "pattern": "999999.99"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-OBTDS-ORG",      "description": "HMRC other business taxes, duties and schemes",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "EtmpRegistrationNumber",          "description": "Registration Number",          "regex": "^[0-9A-Za-z]{1,15}$"        }      ],      "knownFacts": [        {          "name": "BusinessPostcode",          "description": "Principal Place Of Business Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "UTR",          "description": "HMRC unique tax reference (UTR)",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "NonUKCountryCode",          "description": "Country Code (if not UK)",          "regex": "^[0-9A-Za-z]{1,2}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": true,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-CHAR-ORG",      "description": "Charities and Community Amateur Sports Clubs",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "CHARID",          "description": "HMRC Charities Reference",          "regex": "^[0-9A-Za-z]{2,7}$"        }      ],      "knownFacts": [        {          "name": "BANKACCOUNTNUMBER",          "description": "Last four digits of the bank account number.",          "regex": "^[0-9]{4}$|.{0}"        },        {          "name": "CUSTOMERACCTREF",          "description": "Customer Account Reference",          "regex": "^[0-9]{10}$|.{0}"        },        {          "name": "PostCode",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadFlag",          "description": "Abroad Signal Indicator",          "regex": "^[A-Za-z]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-ECW-IND",      "description": "Shared Workspace",      "affinityGroups": [        "Individual"      ],      "identifiers": [        {          "name": "Hmrcecwuid",          "description": "Shared Workspace User Identity",          "regex": "^[0-9A-Za-z]{8}$"        }      ],      "knownFacts": [        {          "name": "Hmrcecwdat",          "description": "Shared Workspace Activation Token",          "regex": "^[0-9A-Za-z]{10}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-PPT-ORG",      "description": "Plastic Packaging Tax",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "EtmpRegistrationNumber",          "description": "PPT Reference Number",          "regex": "^X[A-Z]PPT000[0-9]{6}$"        }      ],      "knownFacts": [        {          "name": "PPTRegistrationDate",          "description": "PPT registration date",          "regex": "^([1-2][0-9]|[0][1-9]|[3][0-1])\\/([0][1-9]|[1][0]|[1][1]|[1][2])\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "BusinessPostCode",          "description": "Business postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "IR-SA-TRUST-ORG",      "description": "Self Assessment Online for Trusts",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "UTR",          "description": "Unique Taxpayer Reference",          "regex": "^[0-9]{1,10}$",          "pattern": "utr"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Post Code",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-LISA-ORG",      "description": "Lifetime ISA",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "ZREF",          "description": "ISA manager reference number (ZREF)",          "regex": "^[0-9A-Za-z]{5,7}$"        }      ],      "knownFacts": [        {          "name": "UTR",          "description": "Tax UTR",          "regex": "^[0-9A-Za-z]{1,10}$",          "pattern": "utr"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-SET-ORG",      "description": "HMRC Secure Electronic Transfer",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "SETReference",          "description": "Your Secure Electronic Transfer Reference Number",          "regex": "^[0-9]{12}$"        }      ],      "knownFacts": [        {          "name": "SETActivationCode",          "description": "Your Service Activation Code",          "regex": "^[0-9]{12}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-MLR-ORG",      "description": "Anti Money Laundering Supervision (AMLS)",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "MLRRefNumber",          "description": "AMLS Registration Number",          "regex": "^[0-9A-Za-z]{1,15}$"        }      ],      "knownFacts": [        {          "name": "CTUTR",          "description": "Corporation Tax Unique Taxpayer Reference",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAUTR",          "description": "Self Assessment Unique Taxpayer Reference (UTR)",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAFEID",          "description": "HMRC Issued Unique Tax Reference",          "regex": "^[0-9A-Za-z]{1,15}$|.{0}"        },        {          "name": "POSTCODE",          "description": "Registered Business Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-ICS-ORG",      "description": "Import Control System",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "EoriTin",          "description": "EORI",          "regex": "^[0-9A-Za-z\\p{L}\\p{Nd}_\\-\\(\\)\\{\\}\\/]{3,17}$"        }      ],      "knownFacts": [        {          "name": "Postcode",          "description": "UK postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": false      }    },    {      "name": "HMRC-CBC-ORG",      "description": "Country-by-Country Reporting",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "cbcId",          "description": "Country-by-Country ID",          "regex": "^[0-9A-Za-z]{1,15}$",          "pattern": "utr"        },        {          "name": "UTR",          "description": "HMRC unique tax reference",          "regex": "^[0-9A-Za-z]{1,10}$",          "pattern": "utr"        }      ],      "knownFacts": [],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-GTS-GBD",      "description": "Gambling Tax System - General Betting Duty",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "HMRCGTSGBRN",          "description": "Gambling Tax System Reference",          "regex": "^[0-9A-Za-z]{14}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Business Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadFlag",          "description": "Abroad Signal Indicator",          "regex": "^[A-Za-z]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMCE-VAT-AGNT",      "description": "VAT for Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "AgentRefNo",          "description": "Agent Reference Number (Your Organisation's VAT Registration Number)",          "regex": "([0-9]|[A-Za-z]){9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "POSTCODE",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        },        {          "name": "IREFFREGDATE",          "description": "Date of Registration",          "regex": "^([1-2][0-9]|[0][1-9]|[3][0-1])\\/([0][1-9]|[1][0]|[1][1]|[1][2])\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "PEPDNO",          "description": "Month of Last VAT Return Period End",          "regex": "^(((JAN|jan)|(FEB|feb)|(MAR|mar)|(APR|apr)|(MAY|may)|(JUN|jun)|(JUL|jul)|(AUG|aug)|(SEP|sep)|(OCT|oct)|(NOV|nov)|(DEC|dec))|[Nn]\\/[Aa])$",          "pattern": "date:MMM"        },        {          "name": "PETAXDUESALES",          "description": "Last Net VAT due",          "regex": "^(\\-{0,1}\\d{1,9}|\\-{0,1}\\d{1,9}\\.\\d{1,2})$",          "pattern": "999999.99"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-VAT-GIANT",      "description": "VAT for Government and NHS",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "GDVATREGNO",          "description": "VAT Registration Number",          "regex": "^[0-9A-Za-z]{5,9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "GIANTDAT",          "description": "Departmental Activation Token",          "regex": "^[0-9A-Za-z]{12}$|.{0}"        },        {          "name": "IRPCODE",          "description": "Post Code",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-PAYE",      "description": "PAYE for Employers",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "TaxOfficeNumber",          "description": "Tax Office Number",          "regex": "^\\d{3}$"        },        {          "name": "TaxOfficeReference",          "description": "Employer Reference",          "regex": "^[A-Za-z0-9 ]{1,10}$"        }      ],      "knownFacts": [        {          "name": "AccountsRef",          "description": "Accounts Office Reference",          "regex": "^[A-Za-z0-9 ]{1,13}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": false      }    },    {      "name": "HMRC-TAVC-ORG",      "description": "Apply for the Enterprise Investment Scheme",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "TAVCRef",          "description": "TAVCRef",          "regex": "^[0-9A-Za-z]{1,15}$"        }      ],      "knownFacts": [        {          "name": "Postcode",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-FATCA-ORG",      "description": "Automatic Exchange of Information (AEOI)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "FATCAID",          "description": "FATCA Identifier",          "regex": "^[0-9]{10}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadFlag",          "description": "Abroad Signal Indicator",          "regex": "^[A-Za-z]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMCE-ECSL-ORG",      "description": "VAT EC Sales List (ECSL)",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "VatRegNo",          "description": "VAT Registration Number",          "regex": "^[0-9]{9}$",          "pattern": "vrn"        },        {          "name": "BranchNo",          "description": "Branch ID No",          "regex": "^[0-9]{3}$"        },        {          "name": "PostCode",          "description": "Business Postcode or Branch Postcode if applicable",          "regex": "^[A-Za-z0-9\\s]{1,8}$",          "pattern": "postcode"        }      ],      "knownFacts": [],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-TO",      "description": "Tied Oils Enquiry Service",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "TO_APPROVAL_NO",          "description": "Approval Number",          "regex": "^\\d{8}$"        }      ],      "knownFacts": [        {          "name": "POSTCODE",          "description": "Postcode",          "regex": "^[A-Za-z0-9\\s]{1,8}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-GTS-RGD",      "description": "Gambling Tax System - Remote Gambling Duty",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "HMRCGTSRGRN",          "description": "Gambling Tax System Reference",          "regex": "^[0-9A-Za-z]{14}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Business Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadFlag",          "description": "Abroad Signal Indicator",          "regex": "^[A-Za-z]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMCE-VATDEC-ORG",      "description": "Submit VAT Returns",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "VATREGNO",          "description": "VAT Registration Number",          "regex": "^[0-9]{1,9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "IRPCODE",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        },        {          "name": "IREFFREGDATE",          "description": "Date of Registration",          "regex": "^([1-2][0-9]|[0][1-9]|[3][0-1])\\/([0][1-9]|[1][0]|[1][1]|[1][2])\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "PEPDNO",          "description": "Month of Last VAT Return Period End",          "regex": "^([A-Za-z]{3}|[Nn]\\/[Aa])$",          "pattern": "date:MMM"        },        {          "name": "PETAXDUESALES",          "description": "Last Net VAT due",          "regex": "^(\\-{0,1}\\d{1,9}|\\-{0,1}\\d{1,9}\\.\\d{1,2})$",          "pattern": "999999.99"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": false      }    },    {      "name": "HMRC-PAYERS-ORG",      "description": "Self Certification of Employee Share Schemes",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "TaxOfficeNo",          "description": "Tax Office Number",          "regex": "^\\d{3}$"        },        {          "name": "EmployerRef",          "description": "Employer Reference",          "regex": "^[A-Za-z0-9 ]{1,10}$"        }      ],      "knownFacts": [        {          "name": "AccountsRef",          "description": "Accounts Office Reference",          "regex": "^[A-Za-z0-9 ]{1,13}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-SA-AGENT",      "description": "Self Assessment (SA) for Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "IRAgentReference",          "description": "Your SA Agent Reference",          "regex": "^[A-Za-z0-9]{6}$"        }      ],      "knownFacts": [        {          "name": "IRAgentPostcode",          "description": "Your Office Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-MGD-ORG",      "description": "Machine Games Duty",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "HMRCMGDRN",          "description": "Machine Gaming Duty Reference",          "regex": "^[A-Za-z0-9 ]{14}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Business Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadFlag",          "description": "Abroad Flag",          "regex": "^[Yy]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": false      }    },    {      "name": "HMRC-CIS-ORG",      "description": "Construction Industry Scheme (CIS)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "TaxOfficeNumber",          "description": "Tax Office Number",          "regex": "^\\d{3}$"        },        {          "name": "TaxOfficeReference",          "description": "Scheme Reference",          "regex": "^[A-Za-z0-9 ]{1,10}$"        }      ],      "knownFacts": [        {          "name": "AccountsOfficeReference",          "description": "Accounts Office Reference",          "regex": "^[A-Za-z0-9 ]{1,13}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-RO",      "description": "Rebated Oils Enquiry Service",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "RO_APPROVAL_NO",          "description": "Approval Number",          "regex": "^\\d{8}$"        }      ],      "knownFacts": [        {          "name": "POSTCODE",          "description": "Postcode",          "regex": "^[A-Za-z0-9\\s]{1,8}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-MGD-AGNT",      "description": "Machine Games Duty Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "HMRCMGDAGENTREF",          "description": "Machine Gaming Duty Agent Reference",          "regex": "^[A-Za-z0-9 ]{10}$"        }      ],      "knownFacts": [        {          "name": "POSTCODE",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadSignal",          "description": "Abroad Signal Indicator",          "regex": "^[Yy]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-PSA-ORG",      "description": "Pension Schemes for Administrators",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "PSAID",          "description": "Scheme Administrator ID",          "regex": "^[Aa]{1}[0-9]{7}$"        }      ],      "knownFacts": [        {          "name": "PSAORGDAT",          "description": "Activation Token",          "regex": "^[Pp]{2}[0-9]{9}$|.{0}"        },        {          "name": "PostCode",          "description": "Post Code",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "PSAAbroad",          "description": "Non-UK based?",          "regex": "^[yYnN]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-ATED-ORG",      "description": "HMRC Annual Tax on Enveloped Dwellings",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "ATEDRefNumber",          "description": "ATED Reference Number",          "regex": "^[0-9A-Za-z]{1,15}$"        }      ],      "knownFacts": [        {          "name": "CTUTR",          "description": "Corporation Tax Unique Taxpayer Reference",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAUTR",          "description": "Self Assessment Unique Taxpayer Reference ",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAFEID",          "description": "HMRC Issued Unique Tax Reference",          "regex": "^[0-9A-Za-z]{1,15}$|.{0}"        },        {          "name": "Postcode",          "description": "Registered UK Business Postcode / International Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-TERS-ORG",      "description": "Trusts Registration Service",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "SAUTR",          "description": "Self Assessment Unique Taxpayer Reference ",          "regex": "^[0-9A-Za-z]{1,10}$",          "pattern": "utr"        }      ],      "knownFacts": [        {          "name": "SAUTR1",          "description": "Self Assessment Unique Taxpayer Reference",          "regex": "^[0-9A-Za-z]{1,10}$",          "pattern": "utr"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-TERSNT-ORG",      "description": "Trusts Registration Service",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "URN",          "description": "Unique Reference Number ",          "regex": "^([A-Z0-9]{1,15})$",          "pattern": "urn"        }      ],      "knownFacts": [        {          "name": "URN1",          "description": "Unique Reference Number",          "regex": "^([A-Z0-9]{1,15})$",          "pattern": "urn"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-GTS-AGNT",      "description": "Gambling Tax Online for Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "HMRCGTSAGENTREF",          "description": "GTS Agent Reference",          "regex": "^[0-9A-Za-z]{14}$"        }      ],      "knownFacts": [        {          "name": "AGENTPOSTCODE",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "ABROADINDICATOR",          "description": "Abroad Signal Indicator",          "regex": "^[A-Za-z]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "IR-SDLT-AGENT",      "description": "Stamp Duty Land Tax Online for Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "STORN",          "description": "Do not use",          "regex": "^[0-9]{1,10}$"        }      ],      "knownFacts": [        {          "name": "STORN2",          "description": "Do not use",          "regex": "^[0-9]{1,10}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": true,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-SA",      "description": "Self Assessment (SA)",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "UTR",          "description": "Unique Taxpayers Reference",          "regex": "^[A-Za-z0-9 ]{1,10}$",          "pattern": "utr"        }      ],      "knownFacts": [        {          "name": "Postcode",          "description": "Your Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "NINO",          "description": "Your National Insurance Number",          "regex": "^[A-Za-z0-9 ]{1,9}$|.{0}",          "pattern": "nino"        },        {          "name": "IsVIP",          "description": "Do you have a Self Assessment Activation PIN for this service?",          "regex": ".{0,1}"        },        {          "name": "DAT",          "description": "Your Self Assessment Activation PIN",          "regex": "^[A-Za-z0-9]{0,12}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "IR-CT",      "description": "Corporation Tax (CT)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "UTR",          "description": "Your Company Tax Reference",          "regex": "^[A-Za-z0-9]{10}$",          "pattern": "utr"        }      ],      "knownFacts": [        {          "name": "Postcode",          "description": "Your Registered Office Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "CRN",          "description": "Your Company Registration Number",          "regex": "^[A-Za-z0-9]{1,8}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": false      }    },    {      "name": "HMRC-EU-REF-ORG",      "description": "VAT EU Refunds",      "affinityGroups": [        "Organisation",        "Individual"      ],      "identifiers": [        {          "name": "VATREGNO",          "description": "VAT Registration Number",          "regex": "^[0-9]{9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Post Code",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$",          "pattern": "postcode"        },        {          "name": "IREFFREGDATE",          "description": "Date of Registration",          "regex": "^[0-9/]{6,8}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "PEPDNO",          "description": "Month of Last VAT Return Period End",          "regex": "^[A-Za-z/]{3}$",          "pattern": "date:MMM"        },        {          "name": "PETAXDUESALES",          "description": "Last Net VAT due",          "regex": "^[0-9]{1,10}(\\.[0-9]{2})?$",          "pattern": "999999.99"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-MOSS-U-ORG",      "description": "VAT Mini One Stop Shop - Businesses within the EU",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "HMRCMOSSVRN",          "description": "VAT Registration Number",          "regex": "^[0-9]{9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "HMRCMOSSEDR",          "description": "MOSS Effective Date of Registration",          "regex": "^\\d{2}\\/\\d{2}\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-EMCS-ORG",      "description": "Excise Movement Control System",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "ExciseNumber",          "description": "Excise Registration Number",          "regex": "^[0-9A-Za-z]{13}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-CTF",      "description": "Child Trust Fund",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "CTFProviderID",          "description": "Your unique CTF Provider ID",          "regex": "^[A-Za-z0-9]{1,7}$"        }      ],      "knownFacts": [        {          "name": "CTFDAT",          "description": "Your CTF activation token",          "regex": "^[A-Za-z0-9]{1,11}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-CT-AGENT",      "description": "Corporation Tax (CT) for Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "IRAgentReference",          "description": "Your CT Agent Reference",          "regex": "^[A-Za-z0-9]{6}$"        }      ],      "knownFacts": [        {          "name": "Postcode",          "description": "Your Office Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-NES",      "description": "HMCE New Export System",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "ROLE",          "description": "CHIEF User Role",          "regex": "^[A-Za-z0-9 ]{1,12}$"        },        {          "name": "TURN",          "description": "TURN",          "regex": "^[A-Za-z0-9 ]{1,12}$"        }      ],      "knownFacts": [],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-GTS-PBD",      "description": "Gambling Tax System - Pool Betting Duty",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "HMRCGTSPBRN",          "description": "Gambling Tax System Reference",          "regex": "^[0-9A-Za-z]{14}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Business Postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "AbroadFlag",          "description": "Abroad Signal Indicator",          "regex": "^[A-Za-z]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-SBI-ORG",      "description": "Business Tax Dashboard",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "HMRCSBI",          "description": "Single Business Identifier",          "regex": "^[A-Za-z0-9 ]{10}$"        }      ],      "knownFacts": [        {          "name": "UTR",          "description": "UTR",          "regex": "^[A-Za-z0-9 ]{1,10}$",          "pattern": "utr"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-NOVA-ORG",      "description": "Notification of Vehicle Arrivals",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "VATREGNO",          "description": "VAT Registration Number",          "regex": "^[0-9]{9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Post Code",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$",          "pattern": "postcode"        },        {          "name": "IREFFREGDATE",          "description": "Date of Registration",          "regex": "^[0-9/]{6,8}$",          "pattern": "date:dd/MM/yy"        },        {          "name": "PEPDNO",          "description": "Month of Last VAT Return Period End",          "regex": "^[A-Za-z/]{3}$",          "pattern": "date:MMM"        },        {          "name": "PETAXDUESALES",          "description": "Last Net VAT due",          "regex": "^[0-9]{1,10}(\\.[0-9]{2})?$",          "pattern": "999999.99"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-SDLT-ORG",      "description": "Stamp Duty Land Tax Online for Organisations",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "STORN",          "description": "Do not use",          "regex": "^[0-9]{1,10}$"        }      ],      "knownFacts": [        {          "name": "STORN2",          "description": "Do not use",          "regex": "^[0-9]{1,10}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": true,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "IR-PAYE-AGENT",      "description": "PAYE/CIS for Agents",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "IRAgentReference",          "description": "Your PAYE Agent Reference",          "regex": "^[A-Za-z0-9]{6}$"        }      ],      "knownFacts": [        {          "name": "IRAgentPostcode",          "description": "Your Office Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-NCTS-ORG",      "description": "New Computerised Transit System (NCTS)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "VATRegNoTURN",          "description": "Your Departmental Trader Unique Reference Number (TURN)",          "regex": "^[nN0-9]{1}[0-9]{11}$"        }      ],      "knownFacts": [        {          "name": "PostCode",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-QROPS-ORG",      "description": "Qualifying Recognised Overseas Pension Scheme",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "QROPSSchMgrID",          "description": "Scheme Manager ID",          "regex": "^[0-9A-Za-z]{10}$"        }      ],      "knownFacts": [        {          "name": "QROPSDAT",          "description": "QROPS Activation Token",          "regex": "^[0-9A-Za-z]{11}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMCE-EBTI-ORG",      "description": "electronic Binding Tariff Information (eBTI)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "VATRegNoTURN",          "description": "Trader's Unique Reference No (TURN)",          "regex": "^[nN0-9]{1}[0-9]{11}$"        },        {          "name": "PostCode",          "description": "Business Postcode",          "regex": "^[A-Za-z0-9\\s]{1,8}$",          "pattern": "postcode"        }      ],      "knownFacts": [],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-ATWD-ORG",      "description": "Alcohol & Tobacco Warehousing Declarations (ATWD)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "warehouseId",          "description": "Warehouse ID",          "regex": "^[a-zA-Z0-9]{13}$"        }      ],      "knownFacts": [        {          "name": "warehousePostcode",          "description": "Warehouse postcode",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": true,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMCE-DDES",      "description": "Duty Deferment Electronic Statements (DDES)",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "DANNo",          "description": "Deferment Approval Number (DAN)",          "regex": "^\\d{7}$"        }      ],      "knownFacts": [        {          "name": "BusinessPostcode",          "description": "Business Postcode",          "regex": "^[A-Za-z0-9\\s]{1,8}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-AGENT-AGENT",      "description": "HMRC Agent",      "affinityGroups": [        "Agent"      ],      "identifiers": [        {          "name": "AgentRefNumber",          "description": "Agent Reference Number",          "regex": "^[0-9A-Za-z]{1,11}$",          "pattern": "arn"        }      ],      "knownFacts": [        {          "name": "CTUTR",          "description": "Company Tax Reference",          "regex": "^[0-9A-Za-z]{1,10}$",          "pattern": "utr"        },        {          "name": "SAUTR",          "description": "Unique Taxpayer Reference (UTR)",          "regex": "^[0-9A-Za-z]{1,10}$",          "pattern": "utr"        },        {          "name": "SAFEID",          "description": "HMRC Issued Unique Tax Reference",          "regex": "^[0-9A-Za-z]{1,15}$"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-PP-ORG",      "description": "Pension Schemes for Practitioners",      "affinityGroups": [        "Organisation"      ],      "identifiers": [        {          "name": "PPID",          "description": "Pension Practitioner ID",          "regex": "^[0-9]{8}$"        }      ],      "knownFacts": [        {          "name": "PPDAT",          "description": "Activation Token",          "regex": "^[Pp]{2}[0-9]{9}$|.{0}"        },        {          "name": "PostCode",          "description": "Post Code",          "regex": "^[A-Za-z]{1,2}[\\d]{1,2}([A-Za-z])?\\s?[\\d][A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "PPAbroad",          "description": "Non-UK based?",          "regex": "^[yYnN]{1}$|.{0}"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": false,        "autoActivation": false      }    },    {      "name": "HMRC-MTD-IT",      "description": "HMRC Making Tax Digital Income Tax",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "MTDITID",          "description": "MTD Reference Number",          "regex": "^[0-9A-Za-z]{1,15}$",          "pattern": "mtditid"        }      ],      "knownFacts": [        {          "name": "NINO",          "description": "National Insurance Number",          "regex": "^[A-Za-z0-9 ]{1,9}$|.{0}",          "pattern": "nino"        },        {          "name": "businesspostcode",          "description": "Business Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-MTD-VAT",      "description": "Making Tax Digital - VAT",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "VRN",          "description": "VAT Registration Number",          "regex": "^[0-9]{1,9}$",          "pattern": "vrn"        }      ],      "knownFacts": [        {          "name": "Postcode",          "description": "Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$|.{0}",          "pattern": "postcode"        },        {          "name": "VATRegistrationDate",          "description": "VAT Registration Date",          "regex": "^([1-2][0-9]|[0][1-9]|[3][0-1])\\/([0][1-9]|[1][0]|[1][1]|[1][2])\\/\\d{2}$",          "pattern": "date:dd/MM/yy"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-CUS-ORG",      "description": "Customs",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "EORINumber",          "description": "EORI Number",          "regex": "^[0-9A-Za-z]{1,17}$",          "pattern": "eoriUK"        }      ],      "knownFacts": [        {          "name": "DateOfEstablishment",          "description": "Date of Establishment",          "regex": "^[0-9/]{8,10}$",          "pattern": "date:dd/MM/yyyy"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-CTS-ORG",      "description": "Customs Trader Services",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "EORINumber",          "description": "EORI Number",          "regex": "^[a-zA-Z]{2}[0-9]{15}$",          "pattern": "eoriUK"        }      ],      "knownFacts": [        {          "name": "DateOfEstablishment",          "description": "Date of Establishment",          "regex": "^[0-9/]{8,10}$",          "pattern": "date:dd/MM/yyyy"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": false,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    },    {      "name": "HMRC-NI-ORG",      "description": "Tell us about your imports from Ireland",      "affinityGroups": [        "Individual",        "Organisation"      ],      "identifiers": [        {          "name": "NIEORI",          "description": "UK EORI with NI suffix",          "regex": "^[0-9A-Za-z]{11,16}$",          "pattern": "eori"        }      ],      "knownFacts": [        {          "name": "CTUTR",          "description": "Corporation Tax Unique Taxpayer Reference",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "SAUTR",          "description": "Self Assessment Unique Taxpayer Reference ",          "regex": "^[0-9A-Za-z]{1,10}$|.{0}",          "pattern": "utr"        },        {          "name": "POSTCODE",          "description": "Registered Postcode",          "regex": "^([A-Za-z][A-Za-z]\\d\\d|[A-Za-z][A-Za-z]\\d|[A-Za-z]\\d|[A-Za-z]\\d\\d|[A-Za-z]\\d[A-Za-z]|[A-Za-z]{2}\\d[A-Za-z]) {0,1}\\d[A-Za-z]{2}$",          "pattern": "postcode"        }      ],      "flags": {        "uniqueIdentifiers": true,        "agentExclusive": true,        "agentExcludesPrincipal": false,        "multipleEnrolment": false,        "autoEnrolment": true,        "autoActivation": true      }    }  ]}